package dijkstra.day15_2021;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Map.Entry;
import java.util.Set;

public class Dijkstra 
{
	
	private static Node getLowestDistanceNode(Set < Node > unsettledNodes) 
	{
	    Node lowestDistanceNode = null;
	    int lowestDistance = Integer.MAX_VALUE;
	    for (Node node: unsettledNodes) 
	    {
	        int nodeDistance = node.getDistance();
	        if (nodeDistance < lowestDistance) {
	            lowestDistance = nodeDistance;
	            lowestDistanceNode = node;
	        }
	    }
	    return lowestDistanceNode;
	}
	
	private static void calculateMinimumDistance(Node evaluationNode,Integer edgeWeigh, Node sourceNode) 
	{
	    Integer sourceDistance = sourceNode.getDistance();
	    if (sourceDistance + edgeWeigh < evaluationNode.getDistance()) 
	    {
	        evaluationNode.setDistance(sourceDistance + edgeWeigh);
	        LinkedList<Node> shortestPath = new LinkedList<>(sourceNode.getShortestPath());
	        shortestPath.add(sourceNode);
	        evaluationNode.setShortestPath(shortestPath);
	    }
	}
	
	public static Graph calculateShortestPathFromSource(Graph graph, Node source) 
	{
	    source.setDistance(0);

	    Set<Node> settledNodes = new HashSet<>();
	    Set<Node> unsettledNodes = new HashSet<>();

	    unsettledNodes.add(source);

	    while (!unsettledNodes.isEmpty()) {
	        Node currentNode = getLowestDistanceNode(unsettledNodes);
	        unsettledNodes.remove(currentNode);
	        for (Entry < Node, Integer> adjacencyPair : currentNode.getAdjacentNodes().entrySet()) {
	            Node adjacentNode = adjacencyPair.getKey();
	            Integer edgeWeight = adjacencyPair.getValue();
	            if (!settledNodes.contains(adjacentNode)) {
	            	calculateMinimumDistance(adjacentNode, edgeWeight, currentNode);
	                unsettledNodes.add(adjacentNode);
	            }
	        }
	        settledNodes.add(currentNode);
	    }
	    return graph;
	}
	
	public static void main_Test(String[] args) 
	{
		Node nodeA = new Node("A");
		Node nodeB = new Node("B");
		Node nodeC = new Node("C");
		Node nodeD = new Node("D");
		Node nodeE = new Node("E");
		Node nodeF = new Node("F");

		nodeA.addDestination(nodeB, 10);
		nodeA.addDestination(nodeC, 15);

		nodeB.addDestination(nodeD, 12);
		nodeB.addDestination(nodeF, 15);

		nodeC.addDestination(nodeE, 10);

		nodeD.addDestination(nodeE, 2);
		nodeD.addDestination(nodeF, 1);

		nodeF.addDestination(nodeE, 5);

		Graph graph = new Graph();

		graph.addNode(nodeA);
		graph.addNode(nodeB);
		graph.addNode(nodeC);
		graph.addNode(nodeD);
		graph.addNode(nodeE);
		graph.addNode(nodeF);

		graph = Dijkstra.calculateShortestPathFromSource(graph, nodeA);	
		
		System.out.println(graph);
	}

	private static String testInput = """
1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581			
""";

	private static String input = """
9319927879926693924289292981328319987931316578169277696988783869228544279445229463567277999867998995
6782137819885688871167116696955987679771519589461881979722694422956389229653389717969915178729293921
4196967349617789911994968389594625922499998784199978769463894298119929998523419691416468995851998897
9939549347377981757829782892395742812959699849785339689589677539252217513971891798498155499956285578
8916384499968378766894352151499199372662869587792187795389453511569982396133971939872465668916878211
7993189556577598975327195382852888888747792768463951799884962661649859719796639872196115821997898244
9131929289774264856998314699854392321299669718664871399915973382646977184981914313583631322769869496
1294639965894198182949974183682936196887518297837684919982691938595779447911996988397175118988698494
4782786949417398178157656111741924726913693999847397789298648194156399186949891721929928386518973189
3977739884126799578896222995845591999757881477816959899697596196263475499959768799776948991584478795
8889637962317919682519681791117593699886146499419897361184928352899298889849151996897316148994198392
5498578218111924989898699181879979946886186695782915336129858857719697498544698119449189891762579543
9783338778987224568666117389627992429787741296997599911865194389848889958925553889979799897423777945
6931291694638181873998892726219973827969749895586381652183578821916888499612146683158297997879317147
8877777991334789218226394711996426411378849596468946891472988131199845489394842963873899198487952998
3539459956998578833759978911968552861677548942139916198879278837961654399499565972991281941498188981
2972974825176113221951922999797475194219955668779238484932662379576969959641999963536596939992938319
8999189987189581934744189464966714191889822969397189484166461782992252158687829572854497939177954812
9178313428786795664136631935649179965178693798648811682669769586398699789681919199495871399999741929
5119378487588899959148634498888174447189235477691334622982392398958554285539978999892599293177578576
9194483992663776979699993923694591699361753399149992817692189238678351118559919281227659784293411968
8298491567898149947916937816986611967598198918469919859981942948999997292151359196586691966622364798
8967617989988598499288583929989879191183693417868427758699995173816914799393159367299299491212938739
9615576413392678732537787848969513319795339442847871984399994395831159168113997819525821779895951131
9517289315991471929899873729491238115986618382898622168953411697612883479692345639948932996812479348
8868645925877716499872291994429779247194997924964482919991898596573118991853614924288837913727386759
9999987737841999942399299639889457399818186751988275896989726181786896522987749911978759955938769911
9965171374918978159589929157213992892387677844962317641171898612329184591217617189742176575229297129
9767929185659816969889468699589589797348131494599948496991519365572468799397762291871989292635299117
8819848216367515398912936929983168368989131886688955177399395931776416252412983329172927847866995999
6299771172636199774384692992389988965934984977999979941449596464194783797413497969982717932271631937
9867919388999249988179181792282919692511593818939811199697519413819695481976294984943596869931783348
5217498999894999148325963118872789879319591769287491854919259276994581865449967987987831114686948989
1276711298478928267591998981197998766572918373116177929646918799773629369715999986696257274486917991
9677549397288943147522629679772837189955155394128389753657889165799871691584372149499497899552724698
3161879596475993681859998589986219969799998994825365956811818594879884919881929971976965899599474911
5978899751278729229937326671598189282789189956298939976972992419825567591984699791288651863712449289
5785843757274446168989662865888761284786699589863846917179969997389799678757213693881899399798283381
9378752974919831848182681851896386931157578417822957982158836367995975749867969189559339898318939296
4993955952819489991949423696319923289965838263329551295268729531941959698478122857749736791389739479
9979913149995894544486789219787199998891969561998591837158798358549919571928399321959581987183951698
4923374226279899729129788946919681194779851147917197889998718126991737982769352816642519928221816197
9429415178891728919769972827548994887898916124219867258118175562995498488988811913466666225834984817
1997187992489979189979738887118749979626651839497889793969749472548747897714399891669799699455896479
9624951339616573939279944717971788599447979873899985998736591429797938969286363498288449419568929497
4681938983828953998696612418773812199371222792989931316197447299912596989997939419196126265222491439
8282969925999179875889569231987788869719997982677696288989132989789147471889661396777872998193215828
9117176216511922775467499987675919339161918275351989597766786989398687478371889678848583957918391983
4497298388369915739296852828574512774696251343567794471621183177947698845776887888485895669987332919
8997686994952766178877812668977742157188969917219861817661572949919915899219234859989915189987975197
4118913999874589615989952873718475897828658681851486595176248687417644198975924996249597864279743829
4579679958921889385239821828857289993449937186914896984992996922484999289511952583999869183918452997
8917999927997994429392299437994891687289495897798495953442112848382963474984728969983994991783149799
3199648699943299557924998832866891178693798554719699899858296272745997987479892662757759122991519658
3914491579265932577578942964548459979268999694999526126213913278751869812666985179899997189599921181
1269972955191548488671189591192374899912929828132891677889925885888738571982935925999913169515229987
8615958688829298177988481927419139187787699635996766899698917751758119585876873124761389897198819885
2167497889941835338936978346275288693895992191919697774591999928333652585539982922569942243597599213
9472668281589151358931112811958629285577878128176692715915826998919398155789165594481997993263959196
9966289385979919968957998245754327958389629627493188196716997492179981999971934979959984817392438989
9145599971993842923971121326227736817867637718119198819933963982629959218237898899655888386991289596
7393759917659977589146245871559799585218399497997751917777999862217868959999822795991196969818211621
9792927889945519672991946543936698168957938218225912882981935387993831231216179615298972181984319228
7743761899817767783667672977139983269215199199699918314639989519981393115896593389898441874874699776
1824497653995798679698799297229749897834797833294197979814281923987255598585839497197117839729571369
8577958882861526317942215717331978988685919519168957591892925161883496938686898898453673315687998843
4191972768117591321987488967786668869999853979339817579176251791521892919919468212444128984415671319
5576891999599798816879657775669991198999224343989577163882862748989953362179892918179279281387216996
9373769111497348825797289843198858611491499267469678187893869937361891692919973885768188384887596189
9859171731132988682195848386695958714996489139645578586441948885317994929358881751899912625863299552
4934928593958897783799983963793921184111597692919959479588985597988338527769967199293539699294774194
1698538489641947137846923886699274821953365783198463959357989161489817229999617499141136156969131969
3296989219983977948718421976373911944179536478972924859298568896972641886161529175995818483911543128
6278913998199519318855192181581196429992429817619397917141979691623919571874589999254329218897887994
9992985668416932999926168816176973997758599186957888288395128484987529129929975441231472862839421695
1362464815499699192596287679432743239657996999693751969711918999687129296564511897258489745988288167
5977189297674799199628985972999971494272992187915199889419992439287859927924778577194577929695457627
3438223999111997512849575289859985859972752399978987619891559997998554511569914599149678154711126639
2979126974919321983991789499388668896928879799646162171851776714127962589986998574331968997456544868
6216795749356515966718898985918565959499628961815279546198979459849845989371831992292699311375776865
8352715528197149369799519852288989699978992875598296779931298654369979999696915593247113843923599538
8962455899599497871221926339396845158947259529895993695544959768976848859779899991114641786957296531
2943869391171944962257474296498957919597467978896784699673793995229658928919598979738119899319383986
9983898169912296799289397793294213546919953477555577429149749497766981349668499994878593194997879275
8889882959291771612692377879435986414239649936776842748579798617821961983999949994989282378389947399
3199997769523581787587969916892769968184616564892139471917169316971672979973375871988172842996584895
8354689792844394798623128972146939743314292658383663832514698996697367378299886829789191826999773961
9893836276828919186673649859239999393698982985775768195847989769239991637411793618869888191917472289
5928583917498121999886377795189961317788981897688629942879519515624767918988389411193999247789868141
1429679799293989912693479848974118958998299151271395998911989696518192397472871957999765285698267313
9239695319699999988488829959759316161477147119979518383759198179368174993997996698566986314498599789
2582659929929648199398128693359499693417769482859853897799284585655687921188318975834353991389972842
8596473468199158355917977999874111821781368897658914981889824514189229862189929872193481817956976884
9685977168754199641189321131863836338914891329759695897928358898995849678196968239981171745482329928
9935621827798812799762166788756959219299892726731815999185647229991757173887841999993427325891658191
1778263118969552899197794341699979459118691212755668996749377169926884394172497294118899699853739749
2787591999446691168197517967271411843279629429417196194996811596363987299412785812633871145227949115
6796987473692958899138914468653236383857234899879631271399676719319916464278159525996129786399815963
5819878197925797859196414992974686679674969364619688199911487117949926999488799995986788649369962889
1611181455799765871782419643336499989899999864957323699781212598968286442487972619699128531368991998	
""";	
	
private static String testInput3 = """
11637517422274862853338597396444961841755517295286
13813736722492484783351359589446246169155735727126
21365113283247622439435873354154698446526571955763
36949315694715142671582625378269373648937148475914
74634171118574528222968563933317967414442817852555
13191281372421239248353234135946434524615754563572
13599124212461123532357223464346833457545794456865
31254216394236532741534764385264587549637569865174
12931385212314249632342535174345364628545647573965
23119445813422155692453326671356443778246755488935
22748628533385973964449618417555172952866628316397
24924847833513595894462461691557357271266846838237
32476224394358733541546984465265719557637682166874
47151426715826253782693736489371484759148259586125
85745282229685639333179674144428178525553928963666
24212392483532341359464345246157545635726865674683
24611235323572234643468334575457944568656815567976
42365327415347643852645875496375698651748671976285
23142496323425351743453646285456475739656758684176
34221556924533266713564437782467554889357866599146
33859739644496184175551729528666283163977739427418
35135958944624616915573572712668468382377957949348
43587335415469844652657195576376821668748793277985
58262537826937364893714847591482595861259361697236
96856393331796741444281785255539289636664139174777
35323413594643452461575456357268656746837976785794
35722346434683345754579445686568155679767926678187
53476438526458754963756986517486719762859782187396
34253517434536462854564757396567586841767869795287
45332667135644377824675548893578665991468977611257
44961841755517295286662831639777394274188841538529
46246169155735727126684683823779579493488168151459
54698446526571955763768216687487932779859814388196
69373648937148475914825958612593616972361472718347
17967414442817852555392896366641391747775241285888
46434524615754563572686567468379767857948187896815
46833457545794456865681556797679266781878137789298
64587549637569865174867197628597821873961893298417
45364628545647573965675868417678697952878971816398
56443778246755488935786659914689776112579188722368
55172952866628316397773942741888415385299952649631
57357271266846838237795794934881681514599279262561
65719557637682166874879327798598143881961925499217
71484759148259586125936169723614727183472583829458
28178525553928963666413917477752412858886352396999
57545635726865674683797678579481878968159298917926
57944568656815567976792667818781377892989248891319
75698651748671976285978218739618932984172914319528
56475739656758684176786979528789718163989182927419
67554889357866599146897761125791887223681299833479		
"""; 	
	
private static String testInput4 = """
1163751742
1381373672
2136511328
3694931569
7463417111
1319128137
1359912421
3125421639
1293138521
2311944581		
""";

private static String testInput5 = """
12
57
""";

	private static int maxy = 0;
	private static int maxx = 0;

	
	public static void main(String[] args)   throws Exception
	{
		StringReader sr = new StringReader(input);
		BufferedReader br = new BufferedReader(sr);
		
		ArrayList<String> ls = new ArrayList<>();
		while (true)
		{
			String line = br.readLine();
			if (line == null) break;
			ls.add(line);
			maxx = Math.max(line.length(), maxx);
			maxy++;
		}
		int[][] riskfieldvalues;
		riskfieldvalues = new int[maxx*5][maxy*5];

		Graph graph = new Graph();
		
		for(int y = 0;y < maxy;y++)
		{
			String[] tok = ls.get(y).split("|");
			for(int x = 0;x < maxx;x++)
			{
				riskfieldvalues[x][y] = Integer.parseInt(tok[x]);
			}
		}

		// Verfünffachen
		for(int y = 0;y < maxy;y++)
		{
			for(int x = 0;x < maxx;x++)
			{
				for(int mulx = 1;mulx < 5;mulx++)
				{
					int n = riskfieldvalues[x][y] + mulx;
					if (n == 10) n = 1;
					if (n == 11) n = 2;
					if (n == 12) n = 3;
					if (n == 13) n = 4;
					if (n == 14) n = 5;
					
					riskfieldvalues[x + maxx * mulx][y] = n; 
				}
			}
		}
		
		maxx *= 5;
		for(int muly = 1;muly < 5;muly++)
		{
			for(int y = 0;y < maxy;y++)
			{
				for(int x = 0;x < maxx;x++)
				{
					int n = riskfieldvalues[x][y] + muly;
					if (n == 10) n = 1;
					if (n == 11) n = 2;
					if (n == 12) n = 3;
					if (n == 13) n = 4;
					if (n == 14) n = 5;

					riskfieldvalues[x][y + maxy * muly] = n; 
				}
			}
		}
		maxy *= 5;
		
		Node[][] riskfield;
		riskfield = new Node[maxx][maxy];

		for(int y = 0;y < maxy;y++)
		{
			for(int x = 0;x < maxx;x++)
			{
				graph.addNode(riskfield[x][y] = new Node(x + ";" + y));
			}
		}

		for(int y = 0;y < maxy;y++)
		{
			for(int x = 0;x < maxx;x++)
			{
				if (x < maxx - 1)
				{
					riskfield[x][y].addDestination(riskfield[x+1][y], riskfieldvalues[x+1][y] );
				}
				if (y < maxy-1)
				{
					riskfield[x][y].addDestination(riskfield[x][y+1], riskfieldvalues[x][y+1]);
				}
				if (x > 0)
				{
					riskfield[x][y].addDestination(riskfield[x-1][y], riskfieldvalues[x-1][y]);
				}
				if (y > 0)
				{
					riskfield[x][y].addDestination(riskfield[x][y-1], riskfieldvalues[x][y-1]);
				}
				
			}
		}
		graph = Dijkstra.calculateShortestPathFromSource(graph, riskfield[0][0]);
		
		try (BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("output.txt"))))
		{
			String[] nodes = graph.toString().split(",");
			for(String s : nodes)
			{
				bw.write(s);
				bw.newLine();
			}
		}
		System.out.println(riskfield[maxx-1][maxy-1].getShortestPath());
		System.out.println(riskfield[maxx-1][maxy-1].getDistance());
	}
}
